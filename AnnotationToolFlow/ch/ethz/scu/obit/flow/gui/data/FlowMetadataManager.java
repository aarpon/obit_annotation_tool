package ch.ethz.scu.obit.flow.gui.data;

import java.util.HashSet;
import java.util.List;

import javax.swing.JDialog;
import javax.swing.JOptionPane;

import ch.ethz.scu.obit.at.gui.ObserverActionParameters;
import ch.ethz.scu.obit.at.gui.data.AbstractMetadataManager;
import ch.ethz.scu.obit.at.gui.data.AbstractViewer;
import ch.ethz.scu.obit.at.gui.data.model.ExperimentNode;
import ch.ethz.scu.obit.at.gui.openbis.OpenBISViewer;
import ch.ethz.scu.obit.common.settings.GlobalSettingsManager;
import ch.ethz.scu.obit.processors.openbis.OpenBISProcessor;
import ch.ethz.scu.obit.processors.openbis.OpenBISProcessor.ProjectInfo;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.common.search.SearchResult;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.space.Space;

/**
 * Metadata editor panel.
 * @author Aaron Ponti
 */
public final class FlowMetadataManager extends AbstractMetadataManager {

    /**
     * Constructor
     * @param dataViewer data viewer.
     * @param openBISViewer openBIS viewer.
     * @param openBISProcessor
     * @param globalSettingsManager global settings manager.
     */
    public FlowMetadataManager(AbstractViewer dataViewer,
            OpenBISViewer openBISViewer,
            OpenBISProcessor openBISProcessor,
            GlobalSettingsManager globalSettingsManager) {

        // Store the reference to the data and openBIS viewers
        super(dataViewer, openBISViewer, openBISProcessor, globalSettingsManager);

        // Initialize the list of metadata mappers
        super.metadataMappers = new HashSet<FlowMetadataMapper>();

    }

    /**
     * Once the metadata has been completely filled, this method makes
     * sure to update the data model (generated by the Processor) to be
     * ready to be saved to the XML properties file.
     */
    @Override
    public boolean updateDataModel() {

        //        // Check whether we have some experiments to update
        //        if (metadataMappersList.size() == 0) {
        //            return false;
        //        }
        //
        //        // Go over all experiments
        //        for (FlowMetadataMapper metadata : metadataMappersList) {
        //
        //            // Get the experiment node
        //            ExperimentNode expNode = metadata.experimentNode;
        //            assert(expNode.getType().equals("Experiment"));
        //
        //            // We first start by updating the Experiment descriptor itself
        //            Experiment expDescr = (Experiment) expNode.getUserObject();
        //
        //            // Set the openBIS experiment identifier
        //            Map<String, String> expOpenBISAttributes =
        //                    new Hashtable<String, String>();
        //            expOpenBISAttributes.put("openBISIdentifier",
        //                    metadata.getOpenBISExerimentIdentifier());
        //            expOpenBISAttributes.put("openBISSpaceIdentifier",
        //                    metadata.getOpenBISSpaceIdentifier());
        //            expDescr.addOpenBISAttributes(expOpenBISAttributes);
        //
        //            // Set the description and the tags
        //            Map<String, String> expUserAttributes =
        //                    new Hashtable<String, String>();
        //            expUserAttributes.put("description", expDescr.description);
        //            expUserAttributes.put("tags", expDescr.tags);
        //            expUserAttributes.put("version", expDescr.version);
        //            expDescr.addUserAttributes(expUserAttributes);
        //
        //            // Now get the Trays and Specimens children of the Experiment
        //            for (int i = 0; i < expNode.getChildCount(); i++) {
        //
        //                // Get the i-th child node
        //                AbstractNode firstLevelSampleNode =
        //                        (AbstractNode) expNode.getChildAt(i);
        //
        //                // Get the Sample Descriptor
        //                SampleDescriptor firstLevelSample =
        //                        (SampleDescriptor) firstLevelSampleNode.getUserObject();
        //
        //                // Make sure we have a Tray or a Specimen
        //                assert((firstLevelSample.getType().equals("Tray") ||
        //                        firstLevelSample.getType().equals("Specimen")));
        //
        //                // Set the openBIS space and experiment identifiers
        //                Map<String, String> firstLevelOpenBISAttributes =
        //                        new Hashtable<String, String>();
        //                firstLevelOpenBISAttributes.put(
        //                        "openBISSpaceIdentifier",
        //                        metadata.getOpenBISSpaceIdentifier());
        //                firstLevelOpenBISAttributes.put(
        //                        "openBISExperimentIdentifier",
        //                        metadata.getOpenBISExerimentIdentifier());
        //                firstLevelSample.addOpenBISAttributes(
        //                        firstLevelOpenBISAttributes);
        //
        //                // In case we have Trays, we set their geometry
        //                if (firstLevelSample.getType().equals("Tray")) {
        //                    Tray tray = (Tray) firstLevelSample;
        //                    Map<String, String> firstLevelUserAttributes =
        //                            new Hashtable<String, String>();
        //                    firstLevelUserAttributes.put(
        //                            "trayGeometry", tray.geometry);
        //                    firstLevelSample.addUserAttributes(
        //                            firstLevelUserAttributes);
        //                }
        //
        //                // Now go over the children
        //                for (int j = 0; j < firstLevelSampleNode.getChildCount(); j++ ) {
        //
        //                    // Get the j-th child node
        //                    AbstractNode secondLevelSampleNode =
        //                            (AbstractNode) firstLevelSampleNode.getChildAt(j);
        //
        //                    // Get the Sample Descriptor
        //                    SampleDescriptor secondLevelSample =
        //                            (SampleDescriptor) secondLevelSampleNode.getUserObject();
        //
        //                    // Make sure we have a Specimen or a Tube
        //                    assert((secondLevelSample.getType().equals("Specimen") ||
        //                            secondLevelSample.getType().equals("Tube")));
        //
        //                    // Set the openBIS space and experiment identifiers
        //                    Map<String, String> secondLevelOpenBISAttributes =
        //                            new Hashtable<String, String>();
        //                    secondLevelOpenBISAttributes.put(
        //                            "openBISSpaceIdentifier",
        //                            metadata.getOpenBISSpaceIdentifier());
        //                    secondLevelOpenBISAttributes.put(
        //                            "openBISExperimentIdentifier",
        //                            metadata.getOpenBISExerimentIdentifier());
        //                    secondLevelSample.addOpenBISAttributes(
        //                            secondLevelOpenBISAttributes);
        //
        //                    // Now go over the children
        //                    for (int k = 0; k < secondLevelSampleNode.getChildCount(); k++ ) {
        //
        //                        // Get the j-th child node
        //                        AbstractNode thirdLevelSampleNode =
        //                                (AbstractNode) secondLevelSampleNode.getChildAt(k);
        //
        //                        // A third-level node can contain a Tube or an FCS file
        //                        AbstractDescriptor abstractSample = (AbstractDescriptor)
        //                                thirdLevelSampleNode.getUserObject();
        //
        //                        // Make sure we have a Well or a FCSFile
        //                        assert((abstractSample.getType().equals("Well") ||
        //                                abstractSample.getType().equals("FCSFile")));
        //
        //                        if (abstractSample.getType().equals("Well")	) {
        //
        //                            // Cast
        //                            SampleDescriptor thirdLevelSample = (SampleDescriptor)
        //                                    thirdLevelSampleNode.getUserObject();
        //
        //                            // Set the openBIS space and experiment identifiers
        //                            Map<String, String> thirdLevelOpenBISAttributes =
        //                                    new Hashtable<String, String>();
        //                            thirdLevelOpenBISAttributes.put(
        //                                    "openBISSpaceIdentifier",
        //                                    metadata.getOpenBISSpaceIdentifier());
        //                            thirdLevelOpenBISAttributes.put(
        //                                    "openBISExperimentIdentifier",
        //                                    metadata.getOpenBISExerimentIdentifier());
        //                            thirdLevelSample.addOpenBISAttributes(
        //                                    thirdLevelOpenBISAttributes);
        //
        //                            // And now we set up the associated FCS file
        //
        //                            // Get the child (one!): the FCS file
        //                            assert(thirdLevelSampleNode.getChildCount() == 1);
        //
        //                            AbstractNode fourthLevelSampleNode = (AbstractNode)
        //                                    thirdLevelSampleNode.getChildAt(0);
        //                            DatasetDescriptor fcsFile = (DatasetDescriptor)
        //                                    fourthLevelSampleNode.getUserObject();
        //
        //                            // Set the openBIS space and experiment identifiers
        //                            Map<String, String> fourthLevelOpenBISAttributes =
        //                                    new Hashtable<String, String>();
        //                            fourthLevelOpenBISAttributes.put(
        //                                    "openBISExperimentIdentifier",
        //                                    metadata.getOpenBISExerimentIdentifier());
        //                            fcsFile.addOpenBISAttributes(
        //                                    fourthLevelOpenBISAttributes);
        //
        //                        } else {
        //
        //                            // Here we have an FCS file
        //
        //                            // Cast
        //                            DatasetDescriptor fcsFile = (DatasetDescriptor)
        //                                    thirdLevelSampleNode.getUserObject();
        //
        //                            // Set the openBIS space and experiment identifiers
        //                            Map<String, String> fourthLevelOpenBISAttributes =
        //                                    new Hashtable<String, String>();
        //                            fourthLevelOpenBISAttributes.put(
        //                                    "openBISExperimentIdentifier",
        //                                    metadata.getOpenBISExerimentIdentifier());
        //                            fcsFile.addOpenBISAttributes(
        //                                    fourthLevelOpenBISAttributes);
        //
        //                        }
        //                    }
        //                }
        //            }
        //        }

        return true;
    }

    /**
     * Map the data and openBIS models
     * @throws Exception it the metadata could not be initialized.
     */
    @Override
    protected boolean initMetadata() throws Exception {

        // Make sure both viewers have completed their models
        if (!openBISViewer.isReady() || !dataViewer.isReady()) {
            return false;
        }

        // Retreive the data experiments and the openBIS spaces and projects
        List<ExperimentNode> experiments = dataViewer.getListOfExperimentNodes();
        SearchResult<Space> spaces = openBISProcessor.getSpacesWithProjects();


        // Check that there is at least one entry in each of the
        // arrays
        if (experiments.size() == 0 || spaces.getTotalCount() == 0) {
            return false;
        }

        // Retrieve the default target project from the User settings or
        // revert to the first project in the list if none is set.
        ProjectInfo defaultProjectNode = openBISProcessor.getDefaultProjectOrFirst();
        if (defaultProjectNode == null) {
            JOptionPane optionPane = new JOptionPane(
                    "No projects could be found in openBIS!\n\n" +
                            "You will need to create one before you can continue.",
                            JOptionPane.ERROR_MESSAGE);
            JDialog dialog = optionPane.createDialog("Error");
            dialog.setAlwaysOnTop(true);
            dialog.setVisible(true);
            dialog.setModal(true);
            return false;
        }

        // TODO Implement me!

        // Return success
        return true;
    }

    /**
     * Discard metadata information since it went out of sync with the data
     * and openBIS models.
     */
    @Override
    protected void resetMetadata(ObserverActionParameters p) {
        // Make sure it is the correct action
        if (p.action != ObserverActionParameters.Action.ABOUT_TO_RESCAN) {
            return;
        }

        // TODO: perform reset!

    }
}
