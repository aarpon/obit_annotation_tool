package ch.ethz.scu.obit.microscopy.gui.data;

import java.util.HashSet;
import java.util.List;

import javax.swing.JDialog;
import javax.swing.JOptionPane;

import ch.ethz.scu.obit.at.gui.ObserverActionParameters;
import ch.ethz.scu.obit.at.gui.data.AbstractMetadataManager;
import ch.ethz.scu.obit.at.gui.data.AbstractViewer;
import ch.ethz.scu.obit.at.gui.data.model.ExperimentNode;
import ch.ethz.scu.obit.at.gui.openbis.OpenBISViewer;
import ch.ethz.scu.obit.common.settings.GlobalSettingsManager;
import ch.ethz.scu.obit.processors.openbis.OpenBISProcessor;
import ch.ethz.scu.obit.processors.openbis.OpenBISProcessor.ProjectInfo;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.common.search.SearchResult;
import ch.ethz.sis.openbis.generic.asapi.v3.dto.space.Space;

/**
 * Metadata editor panel.
 * @author Aaron Ponti
 *
 */
public final class MicroscopyMetadataManager extends AbstractMetadataManager {

    /**
     * Constructor
     * @param dataViewer data viewer
     * @param openBISViewer openBIS viewer
     * @param globalSettingsManager global settings manager
     */
    public MicroscopyMetadataManager(AbstractViewer dataViewer,
            OpenBISViewer openBISViewer,
            OpenBISProcessor openBISProcessor,
            GlobalSettingsManager globalSettingsManager) {

        // Store the reference to the data and openBIS viewers
        super(dataViewer, openBISViewer, openBISProcessor, globalSettingsManager);

        // Initialize the list of metadata mappers
        super.metadataMappers = new HashSet<MicroscopyMetadataMapper>();
    }

    /**
     * Once the metadata has been completely filled, this method makes
     * sure to update the data model (generated by the Processor) to be
     * ready to be saved to the XML properties file.
     */
    @Override
    public boolean updateDataModel() {

        //        // Go over all experiments
        //        for (AbstractMetadataMapper currentMetadata : metadataMappersList) {
        //
        //            MicroscopyMetadataMapper metadata = (MicroscopyMetadataMapper) currentMetadata;
        //
        //            // Get the experiment node
        //            ExperimentNode expNode = currentMetadata.experimentNode;
        //            assert(expNode.getType().equals("Experiment"));
        //
        //            // We first start by updating the Experiment descriptor itself
        //            Experiment expDescr = (Experiment) expNode.getUserObject();
        //
        //            // Set the openBIS experiment identifier
        //            Map<String, String> expOpenBISAttributes =
        //                    new Hashtable<String, String>();
        //            expOpenBISAttributes.put("openBISIdentifier",
        //                    currentMetadata.getOpenBISExerimentIdentifier());
        //            expOpenBISAttributes.put("openBISSpaceIdentifier",
        //                    currentMetadata.getOpenBISSpaceIdentifier());
        //            expDescr.addOpenBISAttributes(expOpenBISAttributes);
        //
        //            // Set the description
        //            Map<String, String> expUserAttributes =
        //                    new Hashtable<String, String>();
        //            expUserAttributes.put("description",
        //                    currentMetadata.getExperiment().description);
        //            expUserAttributes.put("tags", expDescr.tags);
        //            expUserAttributes.put("version", expDescr.version);
        //            expDescr.addUserAttributes(expUserAttributes);
        //
        //            // Now get the MicroscopyFile children of the Experiment
        //            for (int i = 0; i < expNode.getChildCount(); i++) {
        //
        //                // Get the i-th child node
        //                AbstractNode microscopyFileNode =
        //                        (AbstractNode) expNode.getChildAt(i);
        //
        //                // Get the MicroscopyFile Descriptor
        //                DatasetDescriptor microscopyFileDescriptor =
        //                        (DatasetDescriptor) microscopyFileNode.getUserObject();
        //
        //                // Make sure we have a Tray or a Specimen
        //                assert(microscopyFileNode.getType().equals("MicroscopyFile") ||
        //                        microscopyFileNode.getType().equals("MicroscopyCompositeFile"));
        //
        //                // Set the openBIS space and experiment identifiers
        //                Map<String, String> microscopyFileOpenBISAttributes =
        //                        new Hashtable<String, String>();
        //                microscopyFileOpenBISAttributes.put(
        //                        "openBISSpaceIdentifier",
        //                        currentMetadata.getOpenBISSpaceIdentifier());
        //                microscopyFileOpenBISAttributes.put(
        //                        "openBISExperimentIdentifier",
        //                        currentMetadata.getOpenBISExerimentIdentifier());
        //                microscopyFileDescriptor.addOpenBISAttributes(
        //                        microscopyFileOpenBISAttributes);
        //
        //                // Set the description
        //                Map<String, String> fileUserAttributes =
        //                        new Hashtable<String, String>();
        //                fileUserAttributes.put("description",
        //                        microscopyFileDescriptor.description);
        //                microscopyFileDescriptor.addUserAttributes(fileUserAttributes);
        //
        //
        //            }
        //        }

        return true;
    }

    /**
     * Map the data and openBIS models
     * @throws Exception it the metadata could not be initialized.
     */
    @Override
    protected boolean initMetadata() throws Exception {

        // Make sure both viewers have completed their models
        if (!openBISViewer.isReady() || !dataViewer.isReady()) {
            return false;
        }

        // Retreive the data experiments and the openBIS spaces and projects
        List<ExperimentNode> experiments = dataViewer.getListOfExperimentNodes();
        SearchResult<Space> spaces = openBISProcessor.getSpacesWithProjects();


        // Check that there is at least one entry in each of the
        // arrays
        if (experiments.size() == 0 || spaces.getTotalCount() == 0) {
            return false;
        }

        // Retrieve the default target project from the User settings or
        // revert to the first project in the list if none is set.
        ProjectInfo defaultProjectNode = openBISProcessor.getDefaultProjectOrFirst();
        if (defaultProjectNode == null) {
            JOptionPane optionPane = new JOptionPane(
                    "No projects could be found in openBIS!\n\n" +
                            "You will need to create one before you can continue.",
                            JOptionPane.ERROR_MESSAGE);
            JDialog dialog = optionPane.createDialog("Error");
            dialog.setAlwaysOnTop(true);
            dialog.setVisible(true);
            dialog.setModal(true);
            return false;
        }

        // Initialize the list of metadata mappers
        metadataMappers = new HashSet<MicroscopyMetadataMapper>();

        // Assign the default project to all experiments
        for (ExperimentNode e : experiments) {
            MicroscopyMetadataMapper mapper =
                    new MicroscopyMetadataMapper(e, defaultProjectNode);
            metadataMappers.add(mapper);
        }

        // Return success
        return true;
    }

    /**
     * Discard metadata information since it went out of sync with the data
     * and openBIS models.
     */
    @Override
    protected void resetMetadata(ObserverActionParameters p) {
        // Make sure it is the correct action
        if (p.action != ObserverActionParameters.Action.ABOUT_TO_RESCAN) {
            return;
        }

        // TODO: perform reset!

    }
}
